{
  "name": "d4",
  "version": "0.9.2",
  "description": "A friendly reusable chart DSL for D3",
  "repository": {
    "type": "git",
    "url": "git://github.com/heavysixer/d4.git"
  },
  "main": "d4.js",
  "keywords": [
    "d3.js",
    "visualization",
    "svg"
  ],
  "author": {
    "name": "Mark Daggett, D4 Team"
  },
  "scripts": {
    "test": "grunt test"
  },
  "license": "MIT Expat",
  "devDependencies": {
    "chai": "~1.9.0",
    "chai-spies": "~0.5.1",
    "grunt": "~0.4.0",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-uglify": "~0.1.1",
    "grunt-contrib-watch": "~0.3.1",
    "grunt-jsbeautifier": "^0.2.7",
    "grunt-mocha": "~0.4.6",
    "grunt-node-inspector": "~0.1.2",
    "grunt-plato": "*",
    "grunt-remove-logging": ">=0.1.0",
    "sinon": "~1.8.1",
    "sinon-chai": "~2.5.0"
  },
  "dependencies": {
    "grunt-env": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0"
  },
  "gitHead": "e6730be9466ce9780c4e0406d1ea324edc45f23c",
  "readme": "## D4\n\nD4 is a friendly charting DSL for D3. The goal of D4 is to allow developers\nto quickly build data-driven charts with little knowledge of the internals of D3.\n\n### Our fork\n\n<<<<<<< HEAD\nThis is a fork to modify d4 to make it better suited for [Chartbuilder](https://github.com/Quartz/Chartbuilder)\n=======\nFor the bleeding edge version of d4 download it directly from the [github](https://github.com/heavysixer/d4) repository. If you prefer a more stable release you can install the latest released tag using a package manager like bower.\n\n    $ bower install d4\n    or\n    $ npm install d4\n\nOnce you have a local copy of d4 simply include it **after** d3 in your source file.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <!-- sensible defaults for styles -->\n  <link href=\"d4.css\" rel=\"stylesheet\" />\n</head>\n<body>\n  ...\n<script src=\"d3.js\"></script>\n<script src=\"d4.js\"></script>\n</body>\n</html>\n```\n\n#####Hello World\nHere is the most basic example, which uses many of the preset defaults provided by d4.\n\n```javascript\nvar data = [\n  { x : '2010', y : 5 },\n  { x : '2011', y : 15 },\n  { x : '2012', y : 20 }\n];\nvar columnChart = d4.charts.column();\n\nd3.select('someDomElement')\n  .datum(data)\n  .call(columnChart);\n```\n#####Getting Fancy\nd4 allows you to quickly build up sophisticated charts using a declaritive and highly contextual API that allows you to mixin\nor mixout features from your chart.\n\n```javascript\nvar data = [\n  { x : '2010', y : 5 },\n  { x : '2011', y : 15 },\n  { x : '2012', y : 20 }\n];\n\n// Create a column chart without a yAxis, but with a grid in the background.\nvar columnChart = d4.charts.column()\n.mixout('yAxis')\n.mixin({ 'name' : 'grid', 'feature' : d4.features.grid, 'index' : 0 })\n\nd3.select('someDomElement')\n  .datum(data)\n  .call(columnChart);\n```\n\n#####Additional Examples\n\nThere are **many** more examples of d4 in the examples site inside the source code repository. Simply clone the repo and\nopen the `examples/` folder in your favorite web browser.\n\nYou can find a hosted version of the example site here: http://visible.io/\n\nYou can find a quickstart presentation on d4 [here](http://www.slideshare.net/heavysixer/d4-and-friendly-charting-dsl-for-d3).\n\n### Philosophy\n* * *\n\nMany charting libraries do a poor job when it comes to separations of concerns.\nThey attempt to be an all-in-one tool, which is at odds with how modern\napplications are built. Developers do not want a monolith that owns\nthe data transformation, visual aesthetics, and interactivity. This leads to\nenormous libraries with huge config files, where every minutia about the chart\nmust be decided upon beforehand. This typically means developers must first\nlearn a specialized API in order to control even the most basic aspects of the chart.\nd4 believes many of these responsibilities would be better delegated to other technologies.\nIf developers were woodworkers then d4 would be a jig, which allows complex cuts to be made\nin fraction of the time it would normally take.\n\n#### CSS is for styling\n\nMany charting libraries make internal decisions on visual aesthetics, which may\nremove control from the graphic designer, who may or may not understand JavaScript let\nalone a specialized charting API. Choices on visual design like the colors for data series and font\nsizes are best made in CSS. d4 exposes convenient hooks in the generated markup\nto allow visual designer to get precise control over the look and feel without\nneeding deep knowledge of d4.\n\n#### The chart does not own the data\n\nData is a stand-alone object, which can be relied upon by many other scripts on\nthe page. Therefore, a charting library should not change the data object. It can make non-permanent\ntransformations.\n\n#### Context over configuration\n\nThere is a software design concept called \"convention over configuration,\" which states that software should specify a collection of opinionated defaults for the developer. The goal of this approach is to lessen the number of obvious choices a developer must make before they are able to use the software. Instead, configuration should be saved for instances where the defaults do not apply. d4 extends this concept a bit and suggests that configuration should also be highly contextual to the object the developer needs changed. Instead of making choices in some abstract config file, developers instead use a highly declarative API to make changes directly to the object they want augment.\n\n#### Terminology\n* * *\n\nd4 uses specific terms to describe the components of a chart.\n\n__Chart__ - The data rendered by d3 into a graphical representation.\n\n__Feature__ - A visual component of a chart, which helps convey meaning in the data.\n\n__Dimension__ - A segment of the data described by the chart.\n\n__Parser__ - A parser prepares the data for a chart.\n\n####Base Charts\n\n* Area Chart (Coming Soon)\n* [Column Chart](http://visible.io/charts/column/basic.html)\n* [Donut Chart](http://visible.io/charts/donut/basic.html)\n* [Grouped Column Chart](http://visible.io/charts/grouped-column/basic.html)\n* [Grouped Row Chart](http://visible.io/charts/grouped-column/grouped-row.html)\n* [Line Chart](http://visible.io/charts/line/basic.html)\n* [Row Chart](http://visible.io/charts/row/basic.html)\n* [Scatter Chart](http://visible.io/charts/scatter/basic.html)\n* [Stacked Column Chart](http://visible.io/charts/stacked-column/basic.html)\n* [Stacked Row Chart](http://visible.io/charts/stacked-column/stacked-row.html)\n* Waterfall Chart (both [horizontal](http://visible.io/charts/waterfall/horizontal.html) and [vertical](http://visible.io/charts/waterfall/basic.html))\n\n#### Chart Features (Mixins)\n\n* [Arc Labels](https://github.com/heavysixer/d4/blob/master/src/features/arc-labels.js)\n* [Arc Series](https://github.com/heavysixer/d4/blob/master/src/features/arc-series.js)\n* [Arrows](https://github.com/heavysixer/d4/blob/master/src/features/arrow.js)\n* [Brush](https://github.com/heavysixer/d4/blob/master/src/features/brush.js)\n* [Column Labels](https://github.com/heavysixer/d4/blob/master/src/features/column-labels.js)\n* [Grid](https://github.com/heavysixer/d4/blob/master/src/features/grid.js)\n* [Grouped Column Series](https://github.com/heavysixer/d4/blob/master/src/features/grouped-column-series.js)\n* [Line Series Labels](https://github.com/heavysixer/d4/blob/master/src/features/line-series-labels.js)\n* [Line Series](https://github.com/heavysixer/d4/blob/master/src/features/line-series.js)\n* [Reference Lines](https://github.com/heavysixer/d4/blob/master/src/features/reference-line.js)\n* [Stacked Column Connectors](https://github.com/heavysixer/d4/blob/master/src/features/stacked-column-connectors.js)\n* [Stacked Labels](https://github.com/heavysixer/d4/blob/master/src/features/stacked-labels.js)\n* [Stacked Circle Series](https://github.com/heavysixer/d4/blob/master/src/features/stacked-shapes-series.js#L100)\n* [Stacked Ellipse Series](https://github.com/heavysixer/d4/blob/master/src/features/stacked-shapes-series.js#L167)\n* [Stacked Rect Series](https://github.com/heavysixer/d4/blob/master/src/features/stacked-shapes-series.js#L238)\n* [Trend Line](https://github.com/heavysixer/d4/blob/master/src/features/trend-line.js)\n* [Waterfall Column Connectors](https://github.com/heavysixer/d4/blob/master/src/features/waterfall-connectors.js)\n* [X Axis](https://github.com/heavysixer/d4/blob/master/src/features/x-axis.js)\n* [Y Axis](https://github.com/heavysixer/d4/blob/master/src/features/y-axis.js)\n\n#### Contributing\n\nIf you make improvements to d4, please share with others.\n\nFork the project on GitHub.\n\nMake your feature addition or bug fix.\n\nCommit with Git.\n\nSend @heavysixer a pull request.\n\n#### Inspiration\nWhere possible d4 follows existing d3 community best-practices. The inspiration of D4's modular and declarative structure came from\n[Mike Bostock's](http://bost.ocks.org/mike/chart/) article on writing reusable\ncharts in d3. d4 also follows the [general update pattern](http://bl.ocks.org/mbostock/3808234) too. (mostly)\n\n#### Other Projects using d4\n[d4-rails](https://github.com/gouravtiwari/d4-rails)\n>>>>>>> parent of e2e21f8... Merge pull request #22 from slashdotdash/patch-1\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/heavysixer/d4/issues"
  },
  "homepage": "https://github.com/heavysixer/d4#readme",
  "_id": "d4@0.9.2",
  "_shasum": "16c9735b57e91f642c73996e85968f53706f9a48",
  "_from": "git://github.com/yanofsky/d4.git",
  "_resolved": "git://github.com/yanofsky/d4.git#e6730be9466ce9780c4e0406d1ea324edc45f23c"
}
